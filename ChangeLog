TODOs:

- (4) Implement decoding method ICM with restarts.
- (3) Implement exact (brute force) inference method.
- (2) Study and implement how to hallucinate objects and obtain their most probable location.
- (1) Add unit test cases.


Alpha 0.0.5 (03-04-2014)
- [BASE] CNode, CEdge, CNodeType, CEdgeType: added asserts for checking the size of vectors that are to be used to set a member vector, e.g., m_features = features -> assert ( features.size() == n_features ).
- [BASE] Added the posibility of specifying the feature names in an edge type.
- [BASE] Added the posibility of specifying the class names and feature names in a node type.

Alpha 0.0.4 (10-03-2014)
- [BASE] New CNode and CEdge constructors so now any vector-like data type can be use to give the node or edege features.
- [EXAMPLES] Improved the examples documentation. Now they are nicely explained.
- [BASE] Now nodes have also a vector of class multipliers, which can be used to add some prior information to the PGM.
- [INFERENCE] Finally implemented LBP for inference (marginal probabilities computation).
- [BASE] Now the value of a node can be set to a given class, and it will be taken into account in the inference methods.
- [BASE] Now the node and edge potentials can be set manually and never computed again employing the setFinalPotentials() function.

Alpha 0.0.3 (04-03-2014)
- [EXAMPLE] New example added for storing and loading a graphical model to/from file.
- [BASE] Now graphical models can be serialized and stored into a file, as well as recovered from them.
- [REFACTORING] The decoding library is now called inference.
- [REFACTORING] Now decoding functions are classes, all of them childs of the abstract class CDecoder.
- [EXAMPLE] Added example for the generation of synthetic data. This data is used to train and test the performance of a PGM.
- [DECODING] Implemented LBP decoding algorithm.
- [DECODING] Implemented Exact decoding.
- [DECODING] Implemented Exact decoding with mask.
- [BASE] Now the user can set the functions to compute the node and edge potentials.

Alpha 0.0.2 (17-02-2014):
- [REFACTORING] Huge refactoring: The project has been split into a few libraries: base, training and decoding by the moment, but it is probable that the inference one will be added in the future.
- [EXAMPLE] An example of the use of the library for training has been created.
- [DECODING] Now decoding methods can return the negative-log-likelihood of the result as well as the cause of stopping iterating.
- [TRAINING] libLBFGS added as dependency for training PGMs.
- [TRAINING] Development of the basic functinoality for training a PGM.
- [DOCUMENTATION] Documentation improved.


Alpha 0.0.1 (13-02-2014):
- Added two methods for decoding: ICM and GreedyICM.
- Implemented basic data structures for building a PGM, namely: nodes and edges. 
