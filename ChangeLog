/*---------------------------------------------------------------------------*
 |                               UPGM++                                      |
 |                   Undirected Graphical Models in C++                      |
 |                                                                           |
 |              Copyright (C) 2014 Jose Raul Ruiz Sarmiento                  |
 |                 University of Malaga (jotaraul@uma.es)                    |
 |                                                                           |
 |   This program is free software: you can redistribute it and/or modify    |
 |   it under the terms of the GNU General Public License as published by    |
 |   the Free Software Foundation, either version 3 of the License, or       |
 |   (at your option) any later version.                                     |
 |                                                                           |
 |   This program is distributed in the hope that it will be useful,         |
 |   but WITHOUT ANY WARRANTY; without even the implied warranty of          |
 |   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |
 |   GNU General Public License for more details.                            |
 |   <http://www.gnu.org/licenses/>                                          |
 |                                                                           |
 *---------------------------------------------------------------------------*/

TODOs:

- (1) Add unit test cases.
- (2) Increment the debuging capabilities of the library.
- (3) Better errors management.
- (4) Review RBP and picewise training.

Beta 0.3 (30-05-2016)
- [TRAINING] Added Picewise and Score-Matching objective functions.
- [TRAINING] Added different SGD methods for updating the weights: Momentum, Scheduled, Adaptative, and Meta-descent.

Beta 0.2 (10-05-2016)
- [TRAINING] Added new Stochastic Gradient Descent (SGD) method to train UPGMs.
- [INFERENCE] Reviewed LBP inference.

Beta 0.1 (23-04-2015)
- [INFERENCE] Inference and decoding methods renamed to more coherent titles: Inference -> Inference_marginal and Decoding -> Inference_MAP.
- [INFERECE/TRAINING] Added time execution measurements.
- [INFERENCE_MAP] Fixed bug that causes RBP method crash when a graph without edges was processed.

Alpha 0.0.6 (15-10-2014)
- [DECODING] Include the debug option in decoding methods.
- [DECODING] Added a new method for decoding: Alpha-Beta swaps based on graph cuts.
- [DECODING] Decoding methods can now choose a random labeling to the graph nodes as initial step. The default behaviour is the labeling according to the highest node potentials.
- [INFERENCE/DECODING] Implemented TRPBP for inference/decoding.
- [TRAINING] Now the training can be performed using and inference or a decoding method, instead of the utilization of the pseudolikelihood function.

Alpha 0.0.5 (03-04-2014)
- [BASE] Fixed error in RemoveNode from CGraph function.
- [BASE] CNode, CEdge, CNodeType, CEdgeType: added asserts for checking the size of vectors that are to be used to set a member vector, e.g., m_features = features -> assert ( features.size() == n_features ).
- [BASE] Added the posibility of specifying the feature names in an edge type.
- [BASE] Added the posibility of specifying the class names and feature names in a node type.

Alpha 0.0.4 (10-03-2014)
- [BASE] New CNode and CEdge constructors so now any vector-like data type can be use to give the node or edege features.
- [EXAMPLES] Improved the examples documentation. Now they are nicely explained.
- [BASE] Now nodes have also a vector of class multipliers, which can be used to add some prior information to the PGM.
- [INFERENCE] Finally implemented LBP for inference (marginal probabilities computation).
- [BASE] Now the value of a node can be set to a given class, and it will be taken into account in the inference methods.
- [BASE] Now the node and edge potentials can be set manually and never computed again employing the setFinalPotentials() function.

Alpha 0.0.3 (04-03-2014)
- [EXAMPLE] New example added for storing and loading a graphical model to/from file.
- [BASE] Now graphical models can be serialized and stored into a file, as well as recovered from them.
- [REFACTORING] The decoding library is now called inference.
- [REFACTORING] Now decoding functions are classes, all of them childs of the abstract class CDecoder.
- [EXAMPLE] Added example for the generation of synthetic data. This data is used to train and test the performance of a PGM.
- [DECODING] Implemented LBP decoding algorithm.
- [DECODING] Implemented Exact decoding.
- [DECODING] Implemented Exact decoding with mask.
- [BASE] Now the user can set the functions to compute the node and edge potentials.

Alpha 0.0.2 (17-02-2014):
- [REFACTORING] Huge refactoring: The project has been split into a few libraries: base, training and decoding by the moment, but it is probable that the inference one will be added in the future.
- [EXAMPLE] An example of the use of the library for training has been created.
- [DECODING] Now decoding methods can return the negative-log-likelihood of the result as well as the cause of stopping iterating.
- [TRAINING] libLBFGS added as dependency for training PGMs.
- [TRAINING] Development of the basic functinoality for training a PGM.
- [DOCUMENTATION] Documentation improved.


Alpha 0.0.1 (13-02-2014):
- Added two methods for decoding: ICM and GreedyICM.
- Implemented basic data structures for building a PGM, namely: nodes and edges. 
